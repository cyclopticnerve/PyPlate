
# TODO: all refs to .local, etc. should be relative to prj in ide until unstall
# TODO: combine pyplate.py B_ flags into dict and add to project.json
# TODO: custom exceptions (instead of except Exception as e/raise e)
# how to read in pybaker? and write (debug at least, since we pass it in prj)
# TODO: dock icon only works after install, and only for global (not src)
# this might be a wayland thing, see here:
# https://stackoverflow.com/questions/45162862/how-do-i-set-an-icon-for-the-whole-application-using-pygobject
# TODO: swap ui file paths for templates
# TODO: docs: fix icon/version number
# TODO: maybe git update/push in pybaker after fix?
# TODO: make -u option for cli/gui to uninstall
# TODO: CNInstall help str
# TODO: for pkg, after fix, activate prj venv and install pkg as editable
# then change test to use installed pkg, not local dir
# TODO: prg image in docs
# TODO: prg version in docs
# TODO: multiple switches on one line: # pyplate: disable=foo disable=bar
# TODO: for each file in proj, use blacklist and D_CFG/D_ADD/etc to find any
# dunder that is not in comment
# report that as error
# TODO: multiple sources for i18n

# TODO: replace all PB_VERSION with new version, across all files in prj dir
# TODO: fix every metadata using choice menu for new value
# gonna need a lot of regex in pybaker.conf
# TODO: do we need D_PRV_DEF/D_PRV_EXTRA?
# TODO: what do we need from D_PRV_CFG? just __PP_DEV_PP__?

# replace (or just report) any dunders
# replace metadata using prj pybaker (context is prj or dev specific)
# make install.py
# make dist (list of prj stuff into assets folder, install and README.md alongside)

# TODO: pybaker not rely so much on regex, more on context start/end
# TODO: check for version number? needs to be stored on user's comp somewhere
# ------------------------------------------------------------------------------

# TODO: pull in a fresh copy of libs on every run and put it in dist
# we need to get the location of PyPlate from settings (src)
# we need the name of the "__PP_DIR_LIB__" folder from settings (dst)
# TODO: any time pybaker encounters a file with __PP_DATE__ still in the
# header, make sure to use today's date, not the one stored in a config dict
# TODO: install script must install libs, src, etc. into proper folders
# TODO: installer for pkg should move pkg to __PP_USR_LIB__

TODO: change __RM_XXX and _xxx_readme to 'mx/MX' (for markup/markdown)
TODO: fix README instructions for installing (like where it gets
installed/uninstalled from)
TODO: output each step to terminal from pymaker
TODO: combine all __PP dicts
TODO: put pyplate/conf/private dicts into one
TODO: make an html page for checklist.txt and tree.txt that checks all checkboxes for a "complete"
TODO: tool to scan .ui files and build a stub .py with get/set vals and connect actions
TODO: multiline comment support for triple quotes
TODO: html comments also open/close tag, can have code before or after
is it worth it? should we just replace every non-header line?
TODO: have pybaker swap dev/usr lib import in all .py files
or at least remove dev home from path
we are not using any rel path anymore
TODO: pybaker DOES do string repl (all those new files?
if it only runs at dist time, what about date? [pb never do date])
TODO: pb never do pyplate folder in prj
TODO: D_PB_NEED : dict of what pybaker needs : key is D_PRJ_..., val is list
of keys from that dict
TODO: never store proj dir
TODO: determine what lines in a file
TODO: _fix_... that use lines[] dont need re.M
TODO: _fix_header/_fix_code use multiline
non-rat: break on colon, do str rep on value, put back together
with regex, replace line in array
rat: break on colon, rest of line split at two spaces, that group 1 is values
that group 2 split at last space, that group 1 is pad, group 2 is rat
TODO: convert readme fix to html fix
TODO: verify block/line switch keys and values against known values (cuts down
on false positives?)

my cn rat regex is public/private?
it will need to be changed by dev
only match exactly MY headers
or make match both w/ boolean
or make match, auto detect rat
if we go with rat only for me, what to do about blacklist?
headers and text should still be used, but public fix_header should only do
simple string replacement

TODO: _fix_code only looks in lines that don't start with #, split res at #,
only string rep first group, put first and sec back together, repl in M list

TODO: make sure all stuff in private is strictly pp- or cn-related and not output-related
make sure this stuff doesn't duplicate anything in public, only extend
vice versa for public
TODO: actually private is loaded first but imports public
main loads private (MUST STAY)
private loads public
private fills in private
main loads public
fix this?

TODO: which regex done as list/whole string?
TODO: how to use positional args in format strings
ie: the sky is {$1}, the sun is {$2}
TODO: where do we use match? only where we need to check len (ie rat)
everywhere else should just use sub for string replacements

TODO: how does bool flag affect files in skip_headers blacklist?
 flag  |  rat  |  res
---------------------
  0    |   0   |
  0    |   1   |
  1    |   0   |
  1    |   1   |

TODO: ask dev for base dir 1 time, can change later?
TODO: ask dev for everything 1 time?
TODO: always run header test on sample file w/o rat
TODO: what if you move project? what if you move PyPlate? vals should be
updated every run and store in a dev file
TODO: fill in pyplate/private.json w pp PRV_DEF/prg_cfg
TODO: fill in pyplate/project.json w pp blacklist/i18n/metadata
TODO: move get info input format to settings.py
TODO: move _check_name regex to settings
TODO: make a regex tester to run regex on toml, readme, header
TODO: make a flow list of all funcs in here
TODO: rename all const to be consistent
TODO: make sure all runnable files have shebang/chmod +x
TODO: write a tool to scan for unused keys/consts

TODO: 3 levels: cn (me), dev (user of this prg), end user (user of dev's prg)
TODO: move all strings to S_ section in pybaker
TODO: make tree happen in pybaker
TODO: make pybaker check for empty entries in header (not just dunders)
TODO: pybaker update metadata in cli (desc, name, version)(may need context)
TODO: pybaker interactive (ask questions for short desc, deps, etc.)

TODO: test README instructions for all - latest/clone/uninstall
(and check for upper/lowercase in names)
TODO: how to handle screenshot in readme? should be done by pybaker
(after we get a screenshot obviously)

TODO: ctrl+shift+i (format) all files
TODO: lint (CTRL+S) all files

TODO: in gui, what to set to make name change in top bar/dock 
step 1: remove .py from main file
step 2: where is it getting pyplate? from main file?
if so, need to rename main file to PyPlate?
how does that affect other stuff
also why does it try to load png from current dir? (about dlg!)


NEXT: i18n for error messages and file/dir names in settings.py
NEXT: should we ask for names of files for gui ala module name for pkg?
NEXT: should we run potpy on a fresh project? any benefit?
NEXT: get .venv python version and fill in pyproject.toml? how to determine min
req?
do i have to test against every version?
NEXT: get rid of big/small names - all small? or only for packages?
or convert underscores to dashes in small name (or both)
NEXT: merge top level folders from all and type (to move tests/pkg_test, src/pyproject.toml,
etc from only 1 project)
ie. tests/pkg_test and all/pyproject.toml are only for pkg type
NEXT: use globs in pymaker DICT_COPY
NEXT: convert all with open() to with path.open()
NEXT: format license name in fix_readme to account for missing values
see tests/license_test.py and google doc
NEXT: show output progress in pymaker
NEXT: make base relocatable
NEXT: figure out a regex to reset checklist
NEXT: make cntree accept cmd line
NEXT: think of better name for cntree
NEXT: cntree as separate project
NEXT: cntree accept format string for names ('[] $NAME')
NEXT: combine default cli and default cli_config
NEXT: convert all paths to pathlib
NEXT remove .py ext from executable files
i.e. timeshift, timeshift-gtk
NEXT: add logging to all templates
NEXT: put ALL dicts from pymaker into conf file
NEXT: replace project name in misc file headers
NEXT: move license stuff to pybaker, will need to be done once at first run
can be changed later? would need a lot more regex
NEXT: make BASE_DIR configurable
NEXT: remove json in favor of toml for config files (so we can use comments)
NEXT: add email and version to headers
NEXT: test if MODTEST == ModTest == modtest (for project name)(done in _check_name)
NEXT: ask for author/email first time, then store
NEXT: set project info by cmd line (-t,--type, -n,--name, -a,--author, -e,--email)
NEXT: use globs in blacklist (for skip header images)
but these are hardcoded in SO MANY PLACES
these values would only have to be changed once, so make it a script in install?
NEXT: how to add new items to be replaced? 
all current keywords use a fixed regex but what if we want to do simple text replacement?
like just replace 'PP_SOMETHING' with 'foobar'?
NEXT: combine strings.json/blacklist.json
NEXT: pybaker.py get all dunders from dict? i.e. strings.json uses __PP_XXX__
NEXT: check for gtk version 3/4
   does gi.repository have a >= ?
   load ui file based on installed GTK version
NEXT: icons of diff sizes? for desktop/ui
NEXT: need a better way to do headers that doesn't rely on dunders
something like anything more that 2 spaces is formatted to 80?
NEXT: check for string empty fields that are essential(desc,ver,)
NEXT: restructure docstrings - https://www.datacamp.com/tutorial/docstrings-python
also look at official python docs or autoDocstring ext
check for docstrings linter? pydocstyle?
how to document text/json files in docs? add files? and how to add LONG documentation
to docs? i.e. long descriptions of each param?
NEXT: pybaker.py should do replacements first, then do checks
NEXT: pybaker.py: constants to dunders - use find/replace
NEXT: add version number as a heading to README
NEXT: add changelog to README
NEXT: pymaker should only do dunders in source folder and top level files
Same with pybaker.py
Blacklist is too messy - whitelist is easier?
NEXT: document the template structure in README
NEXT: convert pyplate.py recurse stuff from lines[] to text() (or vice versa)
NEXT: move all string-based constants to files in conf
NEXT: releases in GItHub have version number in file/folder name
Makes it hard to overwrite older versions when copy/paste
also correlates to PyPlate readme
NEXT: custom snippets https://code.visualstudio.com/docs/editor/userdefinedsnippets
NEXT: docs module starts at src? need to start at module/package
Does it do the same thing when built?
NEXT: what to do with snippets.txt? do we need it?
NEXT: make py deps have values that are versions (=>3.10) etc for pyproject.toml?
NEXT: figure out what to do with install/uninstall - PyInstaller? Installerator?
NEXT: conf files from json to toml, add comments
NEXT: README: need to figure out if Installerator/Configurator are actually deps
NEXT: README: if there is a file in misc starting with 'screenshot', uncomment that line in README
what to do about placeholder file? and file ext?
NEXT: recurse code in pymaker/pybaker similar... can we combine?
NEXT: make checklist as html/interactive
NEXT: make tree.txt/style.txt as html w/checkboxes
NEXT: change all header date to version ???
NEXT: check cspell
NEXT: run every f-ing linter
NEXT: investigate pyinstaller https://pyinstaller.org/en/stable/requirements.html


DONE ask for meta
DONE update meta in conf file
DONE: markdown needs to ignore hash
DONE: do_after_fix in code, pub, prv
DONE: _fix header only looks in lines starting with #, use ^
DONE: __PP_FILENAME__
DONE: order of imports: keys, public, private
DONE: edit: D_META, D_BLACKLIST, and D_I18N
DONE: for loops to comprehensions
DONE: _fix_blacklist_dunders() has hacky code - use enumerate
DONE: blacklist w/ Path objects has duplicate entries (see settings.json)
DONE: moving blacklist from Paths to strs and back is a PITA
DONE: d_repls
DONE: i18n to settings.json like blacklist/project
DONE: strings out - regex "[^"]
DONE: move all config shit to config.py and load into g_dict_setting
DONE: finalize template/misc/default_class.py and template/misc/default_mod.py
DONE: fix blacklist.json before pymaker.py
DONE: see what path constants show up in docs with my name in them,
 and make them hidden (start with underscore)
DONE: venv doesn't work
works, but throws ugly 'frozen modules' text when run from debug
does not happen when run from terminal
DONE: add globs for blacklist
DONE: check all keys in pymaker.py dicts (all caps, some dunders)
DONE: pymaker doesn't replace PP_AUTHOR in README
DONE: check if pymaker handles empty values in header (blanks remain blank)
DONE: don't replace conf/settings.json keys
DONE: filename entry in header has wrong spacing (modtest/src/modtest.py)
DONE: pymaker doesn't replace PP_AUTHOR_or PP_LICENSE in headers
DONE: rename pyplate.py to pymaker.py and pybaker.py to pybaker.py
DONE: Add author and license somewhere in pymaker so users don't have to do 
find/replace everywhere in template
DONE: what settings do we need in metadata?
DONE: get rid of project type in settings.json
DONE: remove my name from conf/settings.json
DONE: if link is blank in strings.json, don't make link in readme 
DONE: check that cats end in semicolon
DONE: put all readme in same doc
DONE: strings.json PP_PY_DEPS/PP_SYSDEPS/PP_GUI_CATEGORIES is array
DONE: do we really need the _split_str function? (change readme for arrays instead of string)
DONE: test category mismatch in GUI
DONE: remove all brackets from docstrings
DONE: other readme headers/footers
DONE: how to document file formats that don't support comments? json!
done in PyPlate README
DONE: pybaker.py: get freedesktop format locations for exec/icon
DONE: put version num in PyPlate readme/update value in misc/settings.json
should we also put other stuff there? or is that getting too close to a "make PyPlate
using PyPlate" thing?
DONE: spellcheck
DONE: diff main PyPlate dir with template (before metadata)
DONE: add reqs/docs/changelog to pybaker.py
DONE: Move all style entries from to-do and checklist into separate style guide
DONE: copy project reqs from PyPlate reqs, which are pulled from .venv
DONE: check for _path, _file, _dir, _str, _lst and swap
DONE: check for path_, file_, dir_, str_, lst_
DONE: check for _proj and make _prj
DONE: check for proj_ and make prj_
DONE: check for _prj and swap
DONE: check for prj_
DONE: path - whole thing
DONE: file - name only
DONE: dir - up to name or if a folder
DONE: run pip freeze into template during copy
DONE: docs folder is empty in template, so doesn't get into GitHub
DONE: why does PP_SHORT_DESC/PP_VERSION change in misc/empty_main.py?
DONE: PyPlate in empty_main.py? can we live with one error?
DONE: in strings.json, make py deps into dict and add links for README
DONE: check _split_quote in toml/install
DONE: gui categories have commas in file, split on comma and join with semicolon
DONE: finish argparse test to see if we can count args needed vs. args given
DONE: put recursion blacklist of project in settings.json (will need default in PyPlate)
DONE: Module/Package: get rid of import tests after ensuring __init__.py works as expected
DONE: pybaker.py: pybaker's own headers not replaced as it is in misc/
DONE: pybaker.py shows tags in README that are ok (__RM_MOD_START etc)
DONE: put blacklist back in for recursing (easier to maintain/move to agnostic)
DONE: versionator script 
DONE: add argparse to empty_exe.py
DONE: some sort of script to go back after and check that all reps are done
DONE: keep. .py ext in PyPlate/project
DONE: initial filename in header of first src file (src/modtest - modtest.py)
DONE: what about exec/icon paths in .desktop?
DONE: _replace_headers could be done better with regex
DONE: for pkg type, make sure all submodule names are in __init__.py
# DONE: make pybaker an entry in .vscode/launch.json
# DONE: add a .vscode launch for each prj type w/prj name small (or whatever
# default file)
# DONE: no full paths in dist files (any file that goes to end user)
# DONE: _fix_settings_dunders()
# DONE: MANIFEST.in, .gitignore header not fixed
# DONE: _fix header(): author/license padding wrong (works in test)
# DONE: rename pyplate/conf/project.py to private.py (private for pymaker)
# DONE: rename pyplate/conf/settings.py to pyplate.py (public for
# pymaker/pybaker)
# DONE: rename prj/pyplate/project.json to pybaker.json (private for pybaker)
# DONE: rename prj/pyplate/settings.json to project.json (public for pybaker)
# DONE: lost metadata for pp
# DONE: what pybaker functions do we need here (ie. _fix_toml is normally run
# from pybaker.py)
# DONE: combine before and after fix - what REALLY needs to be done before fix?
# DONE: bools to turn on/off git, venv, tree
# DONE: print warning when in debug mode
# DONE  print warning/ask if in debug and about to clobber a dir
# DONE: flesh out use of verbose option
# DONE: make a pyplate folder in PyPlate, put in fake pybaker so we can run
# pybaker on PyPlate project
# also need to add bl/i18n/meta file named "project.json"
# and a file with WHAT??? named "private.json"
# DONE: fill in misc/tree.txt

remove .py exts from executables after installing
(makes them easier/more compliant to call from cmd line)

Use PyPlate to make a project called PyPlate
Install PyMaker like a CLI

move PyPlate/pymaker.py to /usr/bin so we can call it from anywhere
add params for the questions
pymaker -t/--type m|p|c|g -n/--name ModTest
no default, each is required

CLI/GUI: what files to add to install.py when copying
(i.e. apps/cli need to copy files to ~/.cyclopticnerve/proj/app and ~/.cyclopticnerve/proj/app/gui)

Change log should be cumulative with an entry for each version number and date 
of release
Still working on this - need to compare tags but no tags in dev
Can't compare tags in main as changelog will be modified after tag is added

when creating a CLI or GUI app, after creating venv, download and install 
installerator and configurator and build and pylinter
default install script should be modified by PyPlate to download and install 
installerator and configurator in the prerequisites
Add pip install from GitHub instructions to readme
How to know if we are using the latest version of PyPlate, installer and 
configurator
pyproject deps should include inst/cfg for gui/cli but they need to be in pyPI
pyproject.toml should automatically add configurator and installerator for 
cli/gui apps

upload to testpypi/pypi
$ twine upload -r testpypi dist/*
$ twine upload dist/*

install from testpypi/pypi
$ python3 -m pip install -i https://test.pypi.org/simple/PyPlate
$ python3 -m pip install PyPlate

install from github
https://packaging.python.org/en/latest/tutorials/installing-packages/#id23
python3 -m pip install git+https://github.com/cyclopticnerve/PyPlate
requirements? pip install -r requirements.txt

python3 -m pip install -e git+https://github.com/cyclopticnerve/PyPlate.git#egg=__PP_NAME_PRJ_BIG__         # from default branch
python3 -m pip install -e git+https://github.com/cyclopticnerve/PyPlate.git@maine#egg=__PP_NAME_PRJ_BIG__   # from specific branch
