#! /usr/bin/env python
# ------------------------------------------------------------------------------
# Project : __PP_NAME_BIG__                                        /          \
# Filename: __PP_NAME_SMALL__                                     |     ()     |
# Date    : __PP_DATE__                                           |            |
# Author  : __PP_AUTHOR__                                         |   \____/   |
# License : __PP_LICENSE_NAME__                                    \          /
# ------------------------------------------------------------------------------

"""
The main file that runs the program

This file is executable and can be called from the terminal like:

foo@bar:~$ cd [path to directory of this file]
foo@bar:~[path to directory of this file]$ ./__PP_NAME_SMALL__ [cmd line]

or if installed in a global location:

foo@bar:~$ __PP_NAME_SMALL__ [cmd line]

Typical usage is show in the main() method.
"""

# ------------------------------------------------------------------------------
# Imports
# ------------------------------------------------------------------------------

# system imports
import argparse
from pathlib import Path
import sys

# pylint: disable=wrong-import-position
# pylint: disable=wrong-import-order
# pylint: disable=no-name-in-module
# pylint: disable=import-error

# my imports
# add custom import paths

# add lib path to import search
DIR_LIB = "__PP_DIR_LIB__"
sys.path.append(str(DIR_LIB))

from cnlib import cnfunctions as F  # type: ignore
from cnlib.cnformatter import CNFormatter  # type: ignore

# pylint: enable=wrong-import-position
# pylint: enable=wrong-import-order
# pylint: enable=import-error
# pylint: enable=no-name-in-module
# ------------------------------------------------------------------------------
# Strings
# ------------------------------------------------------------------------------

# version option strings
S_VER_OPTION = "v"
S_VER_OPTION_LONG = "version"
S_VER_ACTION = "version"

# config debug strings
S_DBG_OPTION = "d"
S_DBG_OPTION_LONG = "debug"
S_DBG_ACTION = "store_true"
S_DBG_DEST = "DBG_DEST"
S_DBG_HELP = "enable debugging option"

# config update strings
S_UPD_OPTION = "u"
S_UPD_OPTION_LONG = "update"
S_UPD_ACTION = "store_true"
S_UPD_DEST = "UPD_DEST"
S_UPD_HELP = "update installed libs"

# ------------------------------------------------------------------------------
# Constants
# ------------------------------------------------------------------------------

# the default config dict
C_DICT_CFG = {}

# ------------------------------------------------------------------------------
# Globals
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Strings
# ------------------------------------------------------------------------------

# version string for -h/-v option
S_HELP_VERSION = (
    "__PP_NAME_SMALL__\n"
    + "__PP_SHORT_DESC__\n"
    + "__PP_VERSION__\n"
    + "__PP_EMAIL__"
)

# version option strings
S_VER_OPTION = "v"
S_VER_OPTION_LONG = "version"
S_VER_ACTION = "version"
S_VER_VERSION = S_HELP_VERSION

# config option strings
S_CFG_OPTION = "c"
S_CFG_OPTION_LONG = "config-file"
S_CFG_DEST = "CFG_DEST"
S_CFG_HELP = "load configuration from file"
S_CFG_METAVAR = "FILE"

# config debug strings
S_DBG_OPTION = "d"
S_DBG_OPTION_LONG = "debug"
S_DBG_ACTION = "store_true"
S_DBG_DEST = "DBG_DEST"
S_DBG_HELP = "enable debugging option"


# ------------------------------------------------------------------------------
# Public classes
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# The main class, responsible for the operation of the program
# ------------------------------------------------------------------------------
class __PP_NAME_CLASS__:
    """
    The main class, responsible for the operation of the program

    Public methods:
        main: The main method of the program

    This object does the all the work of a typical CLI program. It parses
    command line options, loads/saves config files, and performs the operations
    required for the program.
    """

    # --------------------------------------------------------------------------
    # Class methods
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # Initialize the new object
    # --------------------------------------------------------------------------
    def __init__(self):
        """
        Initialize the new object

        Initializes a new instance of the class, setting the default values
        of its properties, and any other code that needs to run to create a
        new object.
        """

        # call super init to initialize the base class
        super().__init__()

        # set defaults
        self._args = {}
        self._path_config = None
        self._dict_config = C_DICT_CFG

    # --------------------------------------------------------------------------
    # Public methods
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # The main method of the program
    # --------------------------------------------------------------------------
    def main(self):
        """
        The main method of the program

        This method is the main entry point for the program, initializing the
        program, and performing its steps.
        """

        # ----------------------------------------------------------------------
        # steps

        # do parser setup
        self._setup_parser()

        # load config
        self._load_config()

        # call the steps in order
        print(self.func())

        # save config dict to passed in file, NOT def, or LOSE built-in
        self._save_config()

    # --------------------------------------------------------------------------
    # Short description
    # --------------------------------------------------------------------------
    def func(self):
        """
        Short description

        Arguments:
            var_name: Description

        Returns:
            Description

        Raises:
            exception_type(vars): Description

        Long description (including HTML).
        """

        if self._args.get(S_DBG_DEST, False):
            return "this is func (DEBUG)"

        return "this is func"

    # --------------------------------------------------------------------------
    # Private methods
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # Sets up the command line parser
    # --------------------------------------------------------------------------
    def _setup_parser(self):
        """
        Sets up the command line parser

        This method sets up the command line parser to minimize code in
        main().
        """

        # create the command line parser
        parser = argparse.ArgumentParser(
            # use the string constant for help/version and the custom formatter
            # class
            description=S_HELP_VERSION,
            formatter_class=CNFormatter,
        )

        # call the _add_args method to add args (teased out for easier code
        # maintenance)
        self._add_args(parser)

        # get namespace object
        args = parser.parse_args()

        # convert namespace to dict
        self._args = vars(args)

    # --------------------------------------------------------------------------
    # Add arguments to argparse parser
    # --------------------------------------------------------------------------
    def _add_args(self, parser):
        """
        Add arguments to argparse parser

        Arguments:
            parser: The parser to add arguments to

        This method is teased out for better code maintenance.
        """

        # add version option
        parser.add_argument(
            f"-{S_VER_OPTION}",
            f"--{S_VER_OPTION_LONG}",
            action=S_VER_ACTION,
            version=S_VER_VERSION,
        )

        # add config (user dict) option
        parser.add_argument(
            f"-{S_CFG_OPTION}",
            f"--{S_CFG_OPTION_LONG}",
            dest=S_CFG_DEST,
            help=S_CFG_HELP,
            metavar=S_CFG_METAVAR,
        )

        # add debug option
        parser.add_argument(
            f"-{S_DBG_OPTION}",
            f"--{S_DBG_OPTION_LONG}",
            action=S_DBG_ACTION,
            dest=S_DBG_DEST,
            help=S_DBG_HELP,
        )

    # --------------------------------------------------------------------------
    # Loads config file from several sources
    # --------------------------------------------------------------------------
    def _load_config(self):
        """
        Loads config file from several sources

        This method loads config files from several sources, and is teased
        out to simplify the code in main().
        """

        # load config dict from file, def, or just keep built-in
        # Order of precedence is:
        # 1. The file passed to the command-line stored in CFG_DEST
        # 2. The file set in the C_PATH_CFG_DEF constant
        # If neither of the above files are valid, the dict_config dictionary
        # will remain unchanged.

        # if arg is present
        arg_config = self._args.get(S_CFG_DEST, None)
        if arg_config is not None:

            # convert to path
            path_config = Path(arg_config)

            # add to load list
            paths_load = [path_config]

            # load dict(s) from path(s)
            F.load_dicts(paths_load, self._dict_config)

        # debug, print config files
        if self._args.get(S_DBG_DEST, False):
            print("_load_config:")
            F.pp(self._dict_config)

    # --------------------------------------------------------------------------
    # Saves config file to one of several sources
    # --------------------------------------------------------------------------
    def _save_config(self):
        """
        Saves config file to one of several sources

        This method saves the config dict to the first found file.
        """

        # save config dict to file, def, or just lose
        # Order of precedence is:
        # 1. The file passed to the command-line stored in CFG_DEST
        # 2. The file set in the C_PATH_CFG_DEF constant
        # If neither of the above files are valid, the dict_config dictionary
        # will not be saved.

        # if arg is present
        arg_config = self._args.get(S_CFG_DEST, None)
        if arg_config is not None:

            # convert to path
            path_config = Path(arg_config)

            # add to load list
            paths_save = [path_config]

            # save dict to path
            F.save_dict(paths_save, self._dict_config)

        # debug, print config files
        if self._args.get(S_DBG_DEST, False):
            print("_save_config:")
            F.pp(self._dict_config)


# ------------------------------------------------------------------------------
# Code to run when called from command line
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    # Code to run when called from command line

    # This is the top level code of the program, called when the Python file is
    # invoked from the command line.

    # create a new instance of the main class
    instance = __PP_NAME_CLASS__()

    # run main method
    instance.main()

# -)
