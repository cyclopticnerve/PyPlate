#! /usr/bin/env python
# ------------------------------------------------------------------------------
# Project : __PC_NAME_BIG__                                        /          \
# Filename: __PC_NAME_SMALL__                                     |     ()     |
# Date    : __PC_DATE__                                           |            |
# Author  : __PD_AUTHOR__                                         |   \____/   |
# License : __PD_LICENSE_NAME__                                    \          /
# ------------------------------------------------------------------------------

"""
The main file that runs the program

This file is executable and can be called from the terminal like:

foo@bar:~$ cd [path to directory of this file]
foo@bar:~[path to directory of this file]$ ./__PC_NAME_SMALL__ [cmd line]

or if installed in a global location:

foo@bar:~$ __PC_NAME_SMALL__ [cmd line]

Typical usage is show in the main() method.
"""

# ------------------------------------------------------------------------------
# Imports
# ------------------------------------------------------------------------------

# system imports
import argparse
import gettext
import locale
from pathlib import Path
import sys

# add lib path to import search
sys.path.append("__PC_USR_LIB__")
# add app path to import search
sys.path.append("__PC_USR_SRC__")

# pylint: disable=wrong-import-position
# pylint: disable=wrong-import-order
# pylint: disable=no-name-in-module
# pylint: disable=import-error

# my imports
from appmain import AppMain
from cnlib import cnconstants as C  # type: ignore
from cnlib import cnfunctions as F  # type: ignore
from cnlib.cnpot import CNPotPy  # type: ignore
from cnlib.cnformatter import CNFormatter  # type: ignore

# pylint: enable=wrong-import-position
# pylint: enable=wrong-import-order
# pylint: enable=no-name-in-module
# pylint: enable=import-error

# ------------------------------------------------------------------------------
# I18N
# ------------------------------------------------------------------------------

# the domain to use for i18n
C_DOMAIN = "__PC_NAME_SMALL__"

# # these are required to translate strings in PyGObject (.ui/.glade files)
# locale.bindtextdomain(C_DOMAIN, C.POT_DEF_DIR_LOCALE)
# locale.textdomain(C_DOMAIN)

# # these are required to translate strings in python's print function
# # NB: this could be done with gettext.install(), but it creates a LOT of
# # PyLint/PyLance errors, so fuck it, we'll do it old-skool \m/
# gettext.bindtextdomain(C_DOMAIN, C.POT_DEF_DIR_LOCALE)
# gettext.textdomain(C_DOMAIN)

# # make the macro for I18N
# _ = gettext.gettext

# TODO: this is for testing purposes only
t = gettext.translation(C.DOMAIN, localedir=C_LOCALE_DIR, languages=["es"])
t.install()
_ = t.gettext

# ------------------------------------------------------------------------------
# Constants
# ------------------------------------------------------------------------------

# get path to default config file
C_PATH_CFG_DEF = (
    Path.home() / ".config/__PC_NAME_SMALL__/__PC_NAME_SMALL__.json"
)

# the default config dict
C_DICT_CFG_DEF = {}

# path to the gui dir
C_GUI_DIR = Path("__PC_USR_SRC__") / "gtk"

# ------------------------------------------------------------------------------
# Globals
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Strings
# ------------------------------------------------------------------------------

# version string for -h/-v option
# NB: need + b/c we are using i18n macro
S_HELP_VERSION = (
    "__PC_NAME_SMALL__\n"
    # I18N: application description
    + _("__PM_SHORT_DESC__\n")
    + "Version __PM_VERSION__\n"
    + "__PD_URL__/__PC_NAME_BIG__"
)

# version option strings
S_VER_OPTION = "v"
S_VER_OPTION_LONG = "version"
S_VER_ACTION = "version"
S_VER_VERSION = S_HELP_VERSION

# config option strings
S_CFG_OPTION = "c"
S_CFG_OPTION_LONG = "config-file"
S_CFG_DEST = "CFG_DEST"
# I18N: load config file
S_CFG_HELP = _("load configuration from file")
S_CFG_METAVAR = "FILE"

# config debug strings
S_DBG_OPTION = "d"
S_DBG_OPTION_LONG = "debug"
S_DBG_ACTION = "store_true"
S_DBG_DEST = "DBG_DEST"
# I18N: enable debugging option
S_DBG_HELP = _("enable debugging option")

# config gui strings
S_GUI_OPTION = "g"
S_GUI_OPTION_LONG = "gui"
S_GUI_ACTION = "store_true"
S_GUI_DEST = "GUI_DEST"
# I18N: start program using GUI interface
S_GUI_HELP = _("launch program with gui interface")

# ------------------------------------------------------------------------------
# Public classes
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# The main class, responsible for the operation of the program
# ------------------------------------------------------------------------------
class __PC_NAME_BIG__:
    """
    The main class, responsible for the operation of the program

    Public methods:
        main: The main method of the program

    This object does the all the work of a typical CLI program. It parses
    command line options, loads/saves config files, and performs the operations
    required for the program.

    It also checks for the GUI option on the command line and, if found,
    creates an object from another script to handle the GUI.
    """

    # --------------------------------------------------------------------------
    # Class methods
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # Initialize the new object
    # --------------------------------------------------------------------------
    def __init__(self):
        """
        Initialize the new object

        Initializes a new instance of the class, setting the default values
        of its properties, and any other code that needs to run to create a
        new object.
        """

        # call super init to initialize the base class
        super().__init__()

        # set defaults
        self._args = argparse.Namespace()
        self._path_config = None
        self._dict_config = C_DICT_CFG_DEF

    # --------------------------------------------------------------------------
    # Public methods
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # The main method of the program
    # --------------------------------------------------------------------------
    def main(self):
        """
        The main method of the program

        This method is the main entry point for the program, initializing the
        program, and performing its steps.
        """

        # ----------------------------------------------------------------------
        # steps

        # do parser setup
        self._setup_parser()

        # load config
        self._load_config()

        # call the steps in order
        print(self.func())

        # ----------------------------------------------------------------------
        # gui

        # call gui
        if self._args.GUI_DEST:
            print("_do_gui")
            app = AppMain(self._args, self._dict_config)
            app.main()

        # ----------------------------------------------------------------------

        # save config dict to passed in file, NOT def, or LOSE built-in
        self._save_config()

    # --------------------------------------------------------------------------
    # Short description
    # --------------------------------------------------------------------------
    def func(self):
        """
        Short description

        Arguments:
            var_name: Description

        Returns:
            Description

        Raises:
            exception_type(vars): Description

        Long description (including HTML).
        """

        return "this is func"

    # --------------------------------------------------------------------------
    # Private methods
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # Sets up the command line parser
    # --------------------------------------------------------------------------
    def _setup_parser(self):
        """
        Sets up the command line parser

        This method sets up the command line parser to minimize code in
        main().
        """

        # create the command line parser
        parser = argparse.ArgumentParser(
            # use the string constant for help/version and the custom formatter
            # class
            description=S_HELP_VERSION,
            formatter_class=CNFormatter,
        )

        # call the _add_args method to add args (teased out for easier code
        # maintenance)
        self._add_args(parser)

        # get namespace object
        self._args = parser.parse_args()

    # --------------------------------------------------------------------------
    # Add arguments to argparse parser
    # --------------------------------------------------------------------------
    def _add_args(self, parser):
        """
        Add arguments to argparse parser

        Arguments:
            parser: The parser to add arguments to

        This method is teased out for better code maintenance.
        """

        # add version option
        parser.add_argument(
            f"-{S_VER_OPTION}",
            f"--{S_VER_OPTION_LONG}",
            action=S_VER_ACTION,
            version=S_VER_VERSION,
        )

        # add config (user dict) option
        parser.add_argument(
            f"-{S_CFG_OPTION}",
            f"--{S_CFG_OPTION_LONG}",
            dest=S_CFG_DEST,
            help=S_CFG_HELP,
            metavar=S_CFG_METAVAR,
        )

        # add debug option
        parser.add_argument(
            f"-{S_DBG_OPTION}",
            f"--{S_DBG_OPTION_LONG}",
            action=S_DBG_ACTION,
            dest=S_DBG_DEST,
            help=S_DBG_HELP,
        )

        # add gui option
        parser.add_argument(
            f"-{S_GUI_OPTION}",
            f"--{S_GUI_OPTION_LONG}",
            action=S_GUI_ACTION,
            dest=S_GUI_DEST,
            help=S_GUI_HELP,
        )

    # --------------------------------------------------------------------------
    # Loads config file from several sources
    # --------------------------------------------------------------------------
    def _load_config(self):
        """
        Loads config file from several sources

        This method loads config files from several sources, and is teased
        out to simplify the code in main().
        """

        # load config dict from file, def, or just keep built-in
        # Order of precedence is:
        # 1. The file passed to the command-line stored in CFG_DEST
        # 2. The file set in the C_PATH_CFG_DEF constant
        # If neither of the above files are valid, the dict_config dictionary
        # will remain unchanged.

        # load from default
        paths_load = [C_PATH_CFG_DEF]

        # if arg is present
        arg_config = self._args.CFG_DEST
        if arg_config is not None:

            # convert to path
            path_config = Path(arg_config)

            # add to load list
            paths_load.append(path_config)

        # load dict(s) from path(s)
        F.load_dicts(paths_load, self._dict_config)

    # --------------------------------------------------------------------------
    # Saves config file to one of several sources
    # --------------------------------------------------------------------------
    def _save_config(self):
        """
        Saves config file to one of several sources

        This method saves the config dict to the first found file.
        """

        # save config dict to file, def, or just lose
        # Order of precedence is:
        # 1. The file passed to the command-line stored in CFG_DEST
        # 2. The file set in the C_PATH_CFG_DEF constant
        # If neither of the above files are valid, the dict_config dictionary
        # will not be saved.

        # save to default
        paths_save = [C_PATH_CFG_DEF]

        # if arg is present
        arg_config = self._args.CFG_DEST
        if arg_config is not None:

            # convert to path
            path_config = Path(arg_config)

            # add to load list
            paths_save.insert(0, path_config)

        # save dict to path
        F.save_dict(paths_save, self._dict_config)


# ------------------------------------------------------------------------------
# Code to run when called from command line
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    # Code to run when called from command line

    # This is the top level code of the program, called when the Python file is
    # invoked from the command line.

    # dict of clangs and exts
    dict_in = {
        "Python": [
            "py",
        ],
        "Glade": [
            ".ui",
            ".glade",
        ],
        "Desktop": [".desktop"],
    }

    # dict of clangs and no exts (ie file names)
    dict_blank = {
        "Python": [
            "__PC_NAME_SMALL__",
        ],
    }

    # the list of languages your program has been translated into (can grow
    # over time, adding languages as they become available)
    list_wlang = [
        "es",
        "xo",
        "pq",
    ]

    # ------------------------------------------------------------------------------
    # move this to pybaker
    # path to src dir
    dir_src = Path(__file__).parent.resolve()

    pp = CNPotPy(
        dir_src,
        str_appname="foo",
        str_version="0",
        str_email="foo@bar.com",
        str_domain=f"{C_DOMAIN}",
        dict_clangs=dict_in,
        dict_no_ext=dict_blank,
        list_wlangs=list_wlang,
    )

    # I18N: run cnpotpy
    pp.make_pot()
    pp.make_pos()
    pp.make_mos()
    # TODO: does the output file need to exist? if not, delete from template
    pp.make_desktop(
        C_GUI_DIR / "template.desktop",
        C_GUI_DIR / "__PC_NAME_SMALL__.desktop",
    )

    # ------------------------------------------------------------------------------

    # TODO: this is for testing purposes only
    t = gettext.translation(
        C.DOMAIN, localedir=C.POT_DEF_DIR_LOCALE, languages=["es"]
    )
    t.install()
    _ = t.gettext

    # create a new instance of the main class
    instance = __PC_NAME_BIG__()

    # run main method
    instance.main()

# -)
