#! /usr/bin/env python
# ------------------------------------------------------------------------------
# Project : __PP_NAME_BIG__                                        /          \
# Filename: pybaker.py                                            |     ()     |
# Date    : __PP_DATE__                                           |            |
# Author  : __PP_AUTHOR__                                         |   \____/   |
# License : __PP_LICENSE_NAME__                                    \          /
# ------------------------------------------------------------------------------

"""
A simple script to call the real pybaker.py
DO NOT EDIT THIS FILE UNLESS YOU ARE PREPARED FOR THE CONSEQUENCES!!!
"""

# ------------------------------------------------------------------------------
# Imports
# ------------------------------------------------------------------------------

# system imports
from pathlib import Path
import re
import sys
# import shlex
# import subprocess

# pylint: disable=wrong-import-position
# pylint: disable=wrong-import-order
# pylint: disable=no-name-in-module
# pylint: disable=import-error

# my imports
# add custom import paths
P_DIR_PYPLATE = Path.home() / "__PP_DEV_PP__"
P_DIR_PP_LIB = P_DIR_PYPLATE / "src"
sys.path.append(str(P_DIR_PYPLATE))
sys.path.append(str(P_DIR_PP_LIB))

# local imports
from conf import pymaker_conf as M  # type:ignore
from pybaker import PyBaker # type: ignore

# pylint: enable=wrong-import-position
# pylint: enable=wrong-import-order
# pylint: enable=no-name-in-module
# pylint: enable=import-error

class PyBakerSub(PyBaker):
    """docstring"""

    def __init__(self):
        """docstring"""
        super().__init__(self)

    def fix_metadata(self, _a_dir, _a_dict):
        """docstring"""
        self._fix_toml()
        self._fix_src()

    # --------------------------------------------------------------------------
    # Replace text in the pyproject file
    # --------------------------------------------------------------------------
    def _fix_toml(self):
        """
        Replace text in the pyproject file

        Replaces the version number in pyproject.toml.
        """

        # TODO: fix short desc

        # default text if we can't open file
        text = ""

        item = self._dir_prj / "pyproject.toml"

        # open file and get contents
        with open(item, "r", encoding="UTF8") as a_file:
            text = a_file.read()

        # replace version
        str_pattern = r"version = \"(\S*)\""

        # # replace short_desc
        pp_version = self._d_metadata["__PP_VERSION__"]

        # # replace text
        str_rep = f'version = "{pp_version}"'
        text = re.sub(str_pattern, str_rep, text, flags=re.M)

        # save file
        with open(item, "w", encoding="UTF8") as a_file:
            a_file.write(text)

    # --------------------------------------------------------------------------
    # Fix version number in all src files that have a PB_VERSION global
    # --------------------------------------------------------------------------
    def _fix_src(self):
        """
        Fix version number in all src files that have a PB_VERSION global

        Replace all version number globals in src files
        """

        # get path to src folder
        path_src = self._dir_prj / M.S_ALL_SRC

        # the default list of files to fix
        list_src = []

        # walk the src tree
        for root, _dirs, files in path_src.walk():
            for a_file in files:
                # build a list of files
                list_src.append(root / a_file)

        # for each file in list
        for item in list_src:

            # ------------------------------------------------------------------
            # open file

            with open(item, "r", encoding="UTF8") as a_file:
                text = a_file.read()

                # --------------------------------------------------------------
                # replace global

                str_reg = r"\"PB_VERSION = \"(.*)\""
                str_rep = f"{self._version}"
                text = re.sub(str_reg, str_rep, text, flags=re.M)

            # ------------------------------------------------------------------
            # save file

            with open(item, "w", encoding="UTF-8") as a_file:
                a_file.write(text)


# ------------------------------------------------------------------------------
# The main method of the program
# ------------------------------------------------------------------------------
# def main():
#     """
#     The main method of the program

#     This method is the main entry point for the program, initializing the
#     program, and performing its steps.
#     """

#     # path to dev pyplate src pybaker.py
#     p_pb_real = Path.home() / "__PP_DEV_PP__/src/pybaker"
#     s_pb_real = str(p_pb_real)

#     # get current path
#     curr_path = Path(__file__).parents[1].resolve()

#     # call real pybaker with current path on cmd line
#     cmd = f"{s_pb_real} -f {curr_path}"
#     cmd_array = shlex.split(cmd)

#     # get result of running the shell command
#     subprocess.run(cmd_array, check=True)


# ------------------------------------------------------------------------------
# Code to run when called from command line
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    # Code to run when called from command line

    # This is the top level code of the program, called when the Python file is
    # invoked from the command line.

    # run main function
    pb = PyBakerSub()
    pb.main()

# -)
